.TH gregg 7 2008-jul "linux" "heatherly custom tools manual"
.na

.SH NAME
gregg \- decision rationale, objectives, and overview

.SH SUMMARY
gregg is a completely wicked, wonderful, insane, quixotic, and valuable
programming challenge to bring the all-time fastest and most proven english
shorthand system into the digital age.

.SH BACKSTORY
.B concept.  
shorthand is an abbreviated symbolic writing method that increases speed and
brevity of writing with the explicit goal of increasing the speed at which
speech or thoughts can be recorded manually.

.B origin.  
shorthand is at least as old as ancient greece, middle egypt, and imperial
china and was developed to record speeches, notes, royal audiences, legal
and criminal proceedings, and business interactions.

.B more modern shorthand.  
there were many completing types of shorthand used by a vast number of people
in many professions, including journalists, police, and secretaries.

.B gregg.
in 1888, john robert gregg created what was the most popular form of shorthand
in the united states.  gregg is phonetic, eliptical, and does not require
different pressures or line widths.

.SH SCOPE, REASONING and DECISION
.B situation (S).  
computers keyboards, recording devices, and dictation machines were expected
to replace shorthand and therefore it mostly faded out over time.

.B complication (C).  
most folks keyboarding skills are very poor, recording devices are usually not
acceptable, and dictation is a dream, like flying cars.  everyone keeps trying
to move to handwritten input on a touch screen.  hahahahaha.  square one again.
   -- printing     :   12   wpm
   -- cursive      :   23   wpm
   -- typing       :   35   wpm
   -- keyboading   :   50+  wpm
   -- gregg        :   150+ wpm (better in non-transcription mode)
   -- max gregg    :   285  wpm (world class with 98% accuracy)

.B solution (S).  
starting on my apple newton, i realized that porting gregg shorthand to the
touch screen was the answer.  but, its a really, really complex task.

.B target user (T).  
me, just me.  who else is dumb enough ;)

.B what i intend to do
   -- standardize on gregg shorthand simplified version (1949)
   -- use a small graphical entry footprint to accept gregg input
   -- accept full gregg outlines, rather than just strokes
   -- allow either real-time or batch interpretation
   -- then, port it to all my touch devices
   -- add shortcuts as required, moving to anniversary version

.B what i refuse to do
   -- develop any note taking application into gregg
   -- provide or support any alternative input

.B as always, all my applications must (#).  
   -- run on any linux box from raspberry to cray
   -- stay focused, small, tight, reliable, and secure
   -- focus on maintainability and debugging, not just speed
   -- forgo sloppy, kitchen-sink languages, like python, java, or perl
   -- stay away from dependency on external code libraries, like boost
   -- only human-readable, 8-bit safe, ascii streams (not database)
   -- have dedicated, maintained, automated unit testing
   -- provide either detailed reporting or logging for debugging
   -- use secure communications between systems where required
   -- clean, clean code so i can maintain after long absences
   -- use c and vim style convensions whenever possible
   -- no international, multi-lang, multi-byte support (freaking ever)
   -- all tables must be self describing with labels and queries
   -- all data structures must include dumps, reports, and audits

.SH SEE ALSO
this documentation is layered to provide easier navigation.
   gregg (1), initiation, options, and structure
   gregg (6), interactive system usage and navigation
   gregg (7), decision rationale, objectives, and overview

.SH AUTHOR
heatherly <jelloshrke at gmail dot com>

.SH COLOPHON
this page is part of a documentation package mean to make the use of the
heatherly tools easier and faster

